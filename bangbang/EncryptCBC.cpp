//
// Created by wanna on 2021/12/26.
//

#include <cstring>
#include <cstdio>
#include <malloc.h>
#include "EncryptOneBlock.h"

void InsertCBCPadding(unsigned char input[], int *len)
{
    int v4; // r3
    int v6; // r4
    size_t v7; // r4
    unsigned int v8; // r1
    v4 = *len;
    v6 = *len & 0xF;
    if ( v6 )
    {
        v7 = 16 - v6;
        if ( input )
        {
            memset((input+ v4), v7, v7);
            *len += v7;
            return;
        }
    }
    memset(input+ v4, 16, 0x10u);
    *len += 16;
}

//示例数据   const unsigned char orign_input[] = {0xde,0x1a,0x06,0x7a,0xd2,0x17,0x1c,0x7c,0x0c,0x34,0xb0,0x9a,0x95,0x13,0xe6,0xf3,0x73,0xf2,0xf5,0x65,0x7d,0x13,0x2e,0xf0,0xeb,0x9b,0x27,0x3c,0x17,0xab,0x6c,0x4d,0x6e,0x2d,0x18,0xdf,0xb6,0x1e,0x51,0x38,0x64,0x28,0x1a,0xaf,0x47,0xf5,0xcf,0xfb,0xa2,0x5a,0x37,0x2e,0xe3,0x2e,0xc2,0xcb,0x5c,0xfd,0xa4,0x8e,0xad,0xcc,0x76,0x44,0xdb,0x90,0x0a,0x12,0xce,0x88,0x7b,0xf5,0x63,0x5f,0xd2,0x10,0x8b,0xd7,0x8d,0x50,0xda,0xd4,0xe5,0x53,0x74,0xb4,0x75,0x5b,0xa2,0x5c,0x3f,0x57,0x38,0xd3,0x66,0x9c,0xfc,0xec,0x8f,0x04,0x8b,0x93,0x5d,0x68,0xff,0x0e,0x3b,0x46,0x2d,0x5d,0x0d,0xf7,0xc3,0x04,0xc1,0xb7,0x5b,0x7c,0xfe,0x4b,0xf4,0x3c,0x4c,0xb8,0xfb,0xce,0x7b,0x17};
void EncryptCBC(unsigned char *input, int *len)
{
    unsigned char *input_index; // r4
    int v10; // r7
    int i; // r5
    unsigned char *v12; // r3
    unsigned char v13; // r2
    unsigned char v14; // r1
    unsigned char output[16];

    input_index = input;
    InsertCBCPadding(input, len);

    v10 = *len >> 4;
    for (int j = 0; j < 16; ++j) {
        input_index[j] ^= 0;
    }
    for ( i = 0; i != v10; ++i )
    {
        v12 = input_index - 16;
        if ( i )
        {
            do
            {
                v13 = v12[16];
                v14 = *v12++;
                v12[15] = v13 ^ v14;
            }
            while (v12 != input_index );
        }
        EncryptOneBlock(input_index, output);
        memcpy(input_index, output, 0x10u);
        input_index += 16;
    }
}

